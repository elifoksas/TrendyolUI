<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Base.Theme.TrendyolUI" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Customize your light theme here. -->


    </style>

    <style name="Theme.TrendyolUI" parent="Base.Theme.TrendyolUI" >
        <item name="colorPrimary">@color/pumpkin</item>
        <item name="colorPrimaryVariant">@color/pumpkin</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- <item name="colorPrimary">@color/my_light_primary</item> -->
        <item name="android:statusBarColor" tools:targetApi="l">@color/silver_2</item>
    </style>
    <style name="RatingBar" parent="Theme.AppCompat">
        <item name="colorControlNormal">@color/grey_2</item>
        <item name="colorControlActivated">@color/pumpkin</item>
    </style>


    <style name="Rounded_ShapeAppearanceOverlay.MaterialComponents.TextInputLayout" parent="">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">30%</item>
    </style>

    <style name="ThemeOverlay.AppTheme.TextInputEditText.Outlined" parent="">
        <item name="colorPrimary">@color/pumpkin</item>//Activated color

    </style>


    <style name="Widget.App.TextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox">
        <item name="theme">@style/ThemeOverlay.App.TextInputLayout</item>
        <item name="shapeAppearance">
            @style/Rounded_ShapeAppearanceOverlay.MaterialComponents.TextInputLayout
        </item>
        //Changes the Shape Apperance
        <!--<item name="hintTextColor">?attr/colorOnSurface</item>-->   //When you added this line
        it will applies only one color in normal and activate state i.e colorOnSurface color
    </style>

    <style name="ThemeOverlay.App.TextInputLayout" parent="">
        <item name="colorPrimary">@color/pumpkin</item>//Activated color
        <!--Note: When setting a materialThemeOverlay on a custom TextInputLayout style, don’t forget to set editTextStyle to either a @style/Widget.MaterialComponents.TextInputEditText.* style or to a custom one that inherits from that.
        The TextInputLayout styles set materialThemeOverlay that overrides editTextStyle with the specific TextInputEditText style needed. Therefore, you don’t need to specify a style tag on the edit text.-->
        <item name="editTextStyle">@style/Widget.MaterialComponents.TextInputEditText.OutlinedBox
        </item>
    </style>


    <style name="BottomNavigationView" parent="@style/TextAppearance.AppCompat.Caption">
        <item name="android:textSize">10sp</item>
    </style>

    <style name="BottomNavigationView.Active" parent="@style/TextAppearance.AppCompat.Caption">
        <item name="android:textSize">11sp</item>
    </style>



    <style name="TextAppearance.MaterialComponents.Caption" parent="">
        <item name="android:textSize">10sp</item>
    </style>


    <style name="Toolbar.TitleText" parent="TextAppearance.Widget.AppCompat.Toolbar.Title">
        <item name="android:textSize">16sp</item>
    </style>

    <style name="MyDialogStatusBar" parent="Theme.AppCompat.Light.NoActionBar">
        <item name="android:windowIsFloating">false</item>
        <item name="colorPrimaryDark">@color/coral</item>
    </style>



    <style name="roundedImageViewRounded">
        <item name="cornerFamily">rounded</item>
        <item name="cornerSize">10%</item>

    </style>


</resources>